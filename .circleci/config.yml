version: '2.1'
orbs:
  python: circleci/python@1.0.0
jobs:
  check_pep8:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - run:
          command: |
            poetry run flake8 .
          name: Check pep8 format

  build_docker_image:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip=9.0.0-r1
            pip install docker-compose==1.12.0
      - run:
          name: Build docker image
          command: |
            cp .env-example .env
            docker-compose build

  test:
    working_directory: ~/circleci-django
    docker:
      - image: circleci/python:3.9.6
        environment:
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/geojson_db
          GDAL_LIBRARY_PATH: /usr/lib/libgdal.so.*
          GEOS_LIBRARY_PATH: /usr/lib/libgeos_c.so.*

      - image: postgis/postgis:15-master
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: geojson_db
          POSTGRES_PASSWORD: postgres

    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo pip uninstall poetry -y
            sudo pip install poetry==1.2.2
            poetry install
            sudo apt update && sudo apt install -y gdal-bin python-gdal python3-gdal
      - run:
          name: Wait for Postgres
          command: |
            sudo wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo dockerize -wait tcp://localhost:5432 -timeout 10m
      - run:
          name: Run tests
          command: |
            pytest geojsonapi/apps --cov . -n 8

workflows:
  quality:
    jobs:
      - check_pep8
      - build_docker_image
      - test
